on:
    push:
        branches: [master]

# Собираем всё подряд -> Пушим в <branch-name>-develop
# Делаем пулл, тестируем, если тесты прошли -> пушим в <branch-name>-deploy
# Делаем деплой на сервер с последними валидными контейнерами

jobs:
    # Билдим всё подряд (рабочая джоба)
    job-build:
        runs-on: ubuntu-latest
        strategy:
          matrix:
            # Сервисы приложения
            service:
              - backend
              - telegram-bot
              - streamlit-visualization
            include:
              - service: backend
                dockerfile: ./backend/Dockerfile
                context: ./backend
                
              - service: telegram-bot
                dockerfile: ./telegram-bot/Dockerfile
                context: ./telegram-bot

              - service: streamlit-visualization
                dockerfile: ./streamlit-visualization/Dockerfile
                context: ./streamlit-visualization

        steps:
          # Для получения кода в джобе
          - name: Checkout code.
            uses: actions/checkout@v4

          - name: Docker login
            uses: docker/login-action@v2
            with:
              username: ${{ secrets.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_TOKEN }}

          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v2

          # Билдим и пушим в регистри
          - name: Docker build and push <${{ matrix.service }}>
            uses: docker/build-push-action@v3
            with:
              context: ${{ matrix.context }}
              dockerfile: ${{ matrix.dockerfile }}
              push: True

              # Отправляем в девелоп с тегом 
              tags: |
                ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_CI_TAG }}-${{ matrix.service }}:develop
                ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_CI_TAG }}-${{ matrix.service }}:develop-${{ github.sha }}

    # Тестируем контейнеры из девелопа
    job-test:
        needs: job-build
        runs-on: ubuntu-latest
        steps:
          # Получаем репу
          - name: Checkout code.
            uses: actions/checkout@v4

          - name: Docker login
            uses: docker/login-action@v2
            with:
              username: ${{ secrets.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_TOKEN }}

          - name: Docker pull from develop.
            run: |
              docker pull ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_CI_TAG }}-backend:develop-${{ github.sha }}
              docker pull ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_CI_TAG }}-telegram-bot:develop-${{ github.sha }}
              docker pull ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_CI_TAG }}-streamlit-visualization:develop-${{ github.sha }}

          # С префиксом, юзернеймом и тегом
          - name: Start containers for testing
            run: |
              cp .env.example .env
              export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
              export DOCKER_PREFIX=${{ vars.DOCKER_CI_TAG }}
              export TAG=develop-${{ github.sha }}
              docker compose -f docker-compose-ci.yaml up -d

          # Подготавливаем питон
          - name: Set up Python
            uses: actions/setup-python@v4
            with:
              python-version: '3.11'  # или твоя версия

          - name: Running tests
            run: |
              pip install pytest requests

              echo [x] Running unit tests.
              pytest ./tests/unit

              echo [x] Running e2e tests.
              pytest ./tests/e2e

    # Делаем ретаг для деплоя если контейнеры прошли тест
    job-retag:
        needs:
          - job-test
          - job-build
        runs-on: ubuntu-latest
        strategy:
          matrix:
            # Сервисы приложения
            service:
              - backend
              - telegram-bot
              - streamlit-visualization
            include:
              - service: backend
              - service: telegram-bot
              - service: streamlit-visualization

        steps:
          - name: Docker login
            uses: docker/login-action@v2
            with:
              username: ${{ secrets.DOCKER_USERNAME }}
              password: ${{ secrets.DOCKER_TOKEN }}
          
          # Достаём контейнеры из регистри
          - name: Pulling container ${{ matrix.service }}
            run: docker pull ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_CI_TAG }}-${{ matrix.service }}:develop-${{ github.sha }}
          
          # Делаем ретаг и радуемся жизни
          - name: Retagging container ${{ matrix.service }}
            run: |
              docker tag ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_CI_TAG }}-${{ matrix.service }}:develop-${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_CI_TAG }}-${{ matrix.service }}:latest
              docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.DOCKER_CI_TAG }}-${{ matrix.service }}:latest

    
    # job-deploy:
    #   needs: job-retag
    #   runs-on: ubuntu-latest
    #   steps:
    #     - name: Docker login
    #       uses: docker/login-action@v2
    #       with:
    #         username: ${{ secrets.DOCKER_USERNAME }}
    #         password: ${{ secrets.DOCKER_TOKEN }}

    #     # Получаем репу
    #     - name: Checkout code.
    #       uses: actions/checkout@v4

    #     - name: Start all services.
    #       run: docker compose -f docker-compose-ci.yaml up -d