import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime

from src.helpers.ping_api import (
    PingAPI, config
)

api = PingAPI()

def page_ping():
    st.text("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∏–Ω–≥ –∏ —á–µ–∫–Ω—É—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

    window = st.number_input(
        label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π", 
        min_value=10, 
        max_value=1_000_000, 
        value=100
    )
    
    data = api.get_pings(window)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ

    if st.button(label="–û–±–Ω–æ–≤–∏—Ç—å", key="btn_ping_refresh"):
        data = api.get_pings(window)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ

    with st.container(border=True):
        st.info("üìä –ù–µ–±–æ–ª—å—à–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        if data and len(data) > 0:
            # –ë–æ–ª—å—à–∞—è –∫—Ä–∞—Å–∏–≤–∞—è —Ü–∏—Ñ—Ä–∞ —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric(
                    label="–í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π",
                    value=len(data),
                    delta=f"–ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {window}"
                )
            
            with col2:
                # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                if data:
                    last_ping = data[0]  # –ï—Å–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
                    st.metric(
                        label="–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                        value=datetime.fromisoformat(last_ping['time']).strftime("%H:%M:%S")
                    )
            
            # –ì—Ä–∞—Ñ–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø–æ —á–∞—Å–∞–º
            st.subheader("–ì—Ä–∞—Ñ–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            df = pd.DataFrame(data)
            df['datetime'] = pd.to_datetime(df['time'])
            df['hour'] = df['datetime'].dt.floor('h')  # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Å–∞–º
            
            hourly_stats = df.groupby('hour').size().reset_index(name='count')
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig = px.line(
                hourly_stats, 
                x='hour', 
                y='count',
                title='–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ —á–∞—Å–∞–º',
                labels={'hour': '–í—Ä–µ–º—è', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π'}
            )
            fig.update_traces(line_color='#1f77b4', line_width=3)
            fig.update_layout(
                xaxis_title="–í—Ä–µ–º—è",
                yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π",
                hovermode='x unified'
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    with st.container(border=True):
        st.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
        st.markdown("### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ")
        server_info = pd.DataFrame([
            {"–ü–∞—Ä–∞–º–µ—Ç—Ä": "Backend URL", "–ó–Ω–∞—á–µ–Ω–∏–µ": config.BACKEND_BASEURL},
            {"–ü–∞—Ä–∞–º–µ—Ç—Ä": "–°—Ç–∞—Ç—É—Å", "–ó–Ω–∞—á–µ–Ω–∏–µ": "üü¢ –û–Ω–ª–∞–π–Ω" if True else "üî¥ –û—Ñ–ª–∞–π–Ω"},  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        ])
        st.table(server_info)
        
    
        check = st.button(
            label="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏–Ω–≥", 
            key="btn_ping",
            use_container_width=True
        )

        if check:
            with st.spinner('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...'):
                try:
                    response = api.ping()
                    
                    # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                    if response:
                        st.success("‚úÖ –ü–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤ expander
                        with st.expander("–î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞", expanded=True):
                            st.json(response)
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏–Ω–≥–∞")
                        
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
